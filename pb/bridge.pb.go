// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: bridge.proto

package bridge

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PingReq) Reset() {
	*x = PingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReq) ProtoMessage() {}

func (x *PingReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReq.ProtoReflect.Descriptor instead.
func (*PingReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *PingReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PingRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PingRsp) Reset() {
	*x = PingRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRsp) ProtoMessage() {}

func (x *PingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRsp.ProtoReflect.Descriptor instead.
func (*PingRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *PingRsp) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetReq) Reset() {
	*x = GetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReq) ProtoMessage() {}

func (x *GetReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReq.ProtoReflect.Descriptor instead.
func (*GetReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *GetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *GetRsp) Reset() {
	*x = GetRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRsp) ProtoMessage() {}

func (x *GetRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRsp.ProtoReflect.Descriptor instead.
func (*GetRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *GetRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetRsp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
	Expire int64  `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *PutReq) Reset() {
	*x = PutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutReq) ProtoMessage() {}

func (x *PutReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutReq.ProtoReflect.Descriptor instead.
func (*PutReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *PutReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PutReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type PutRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
	Expire int64  `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *PutRsp) Reset() {
	*x = PutRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRsp) ProtoMessage() {}

func (x *PutRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRsp.ProtoReflect.Descriptor instead.
func (*PutRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *PutRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutRsp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PutRsp) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type DelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DelReq) Reset() {
	*x = DelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelReq) ProtoMessage() {}

func (x *DelReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelReq.ProtoReflect.Descriptor instead.
func (*DelReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *DelReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DelRsp) Reset() {
	*x = DelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRsp) ProtoMessage() {}

func (x *DelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRsp.ProtoReflect.Descriptor instead.
func (*DelRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *DelRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type PublishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PublishReq) Reset() {
	*x = PublishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishReq) ProtoMessage() {}

func (x *PublishReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishReq.ProtoReflect.Descriptor instead.
func (*PublishReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{8}
}

func (x *PublishReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PublishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey       string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	BeforeValue string `protobuf:"bytes,3,opt,name=beforeValue,proto3" json:"beforeValue,omitempty"`
	AfterValue  string `protobuf:"bytes,4,opt,name=afterValue,proto3" json:"afterValue,omitempty"`
	Type        int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	DataType    int32  `protobuf:"varint,6,opt,name=dataType,proto3" json:"dataType,omitempty"`
}

func (x *PublishRsp) Reset() {
	*x = PublishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRsp) ProtoMessage() {}

func (x *PublishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRsp.ProtoReflect.Descriptor instead.
func (*PublishRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{9}
}

func (x *PublishRsp) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *PublishRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PublishRsp) GetBeforeValue() string {
	if x != nil {
		return x.BeforeValue
	}
	return ""
}

func (x *PublishRsp) GetAfterValue() string {
	if x != nil {
		return x.AfterValue
	}
	return ""
}

func (x *PublishRsp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PublishRsp) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

type WatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *WatchReq) Reset() {
	*x = WatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchReq) ProtoMessage() {}

func (x *WatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchReq.ProtoReflect.Descriptor instead.
func (*WatchReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{10}
}

func (x *WatchReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type WatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *WatchRsp) Reset() {
	*x = WatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRsp) ProtoMessage() {}

func (x *WatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRsp.ProtoReflect.Descriptor instead.
func (*WatchRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{11}
}

func (x *WatchRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HMGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
}

func (x *HMGetReq) Reset() {
	*x = HMGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMGetReq) ProtoMessage() {}

func (x *HMGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMGetReq.ProtoReflect.Descriptor instead.
func (*HMGetReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{12}
}

func (x *HMGetReq) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

type HMGetRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *HMGetRsp) Reset() {
	*x = HMGetRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMGetRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMGetRsp) ProtoMessage() {}

func (x *HMGetRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMGetRsp.ProtoReflect.Descriptor instead.
func (*HMGetRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{13}
}

func (x *HMGetRsp) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMGetRsp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HMGetMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HMGetMemberReq) Reset() {
	*x = HMGetMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMGetMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMGetMemberReq) ProtoMessage() {}

func (x *HMGetMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMGetMemberReq.ProtoReflect.Descriptor instead.
func (*HMGetMemberReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{14}
}

func (x *HMGetMemberReq) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMGetMemberReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HMGetMemberRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *HMGetMemberRsp) Reset() {
	*x = HMGetMemberRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMGetMemberRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMGetMemberRsp) ProtoMessage() {}

func (x *HMGetMemberRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMGetMemberRsp.ProtoReflect.Descriptor instead.
func (*HMGetMemberRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{15}
}

func (x *HMGetMemberRsp) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMGetMemberRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HMGetMemberRsp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HMPutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey  string   `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key    []string `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	Value  []string `protobuf:"bytes,3,rep,name=kv,proto3" json:"kv,omitempty"`
	Expire int64    `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *HMPutReq) Reset() {
	*x = HMPutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMPutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMPutReq) ProtoMessage() {}

func (x *HMPutReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMPutReq.ProtoReflect.Descriptor instead.
func (*HMPutReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{16}
}

func (x *HMPutReq) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMPutReq) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HMPutReq) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HMPutReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type HMPutRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey  string   `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key    []string `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	Value  []string `protobuf:"bytes,3,rep,name=kv,proto3" json:"kv,omitempty"`
	Expire int64    `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *HMPutRsp) Reset() {
	*x = HMPutRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMPutRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMPutRsp) ProtoMessage() {}

func (x *HMPutRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMPutRsp.ProtoReflect.Descriptor instead.
func (*HMPutRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{17}
}

func (x *HMPutRsp) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMPutRsp) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HMPutRsp) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HMPutRsp) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type HMDelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
}

func (x *HMDelReq) Reset() {
	*x = HMDelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMDelReq) ProtoMessage() {}

func (x *HMDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMDelReq.ProtoReflect.Descriptor instead.
func (*HMDelReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{18}
}

func (x *HMDelReq) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

type HMDelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
}

func (x *HMDelRsp) Reset() {
	*x = HMDelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMDelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMDelRsp) ProtoMessage() {}

func (x *HMDelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMDelRsp.ProtoReflect.Descriptor instead.
func (*HMDelRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{19}
}

func (x *HMDelRsp) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

type HMDelMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HMDelMemberReq) Reset() {
	*x = HMDelMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMDelMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMDelMemberReq) ProtoMessage() {}

func (x *HMDelMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMDelMemberReq.ProtoReflect.Descriptor instead.
func (*HMDelMemberReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{20}
}

func (x *HMDelMemberReq) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMDelMemberReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HMDelMemberRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HMDelMemberRsp) Reset() {
	*x = HMDelMemberRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMDelMemberRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMDelMemberRsp) ProtoMessage() {}

func (x *HMDelMemberRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMDelMemberRsp.ProtoReflect.Descriptor instead.
func (*HMDelMemberRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{21}
}

func (x *HMDelMemberRsp) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMDelMemberRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HMWatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HMWatchReq) Reset() {
	*x = HMWatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMWatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMWatchReq) ProtoMessage() {}

func (x *HMWatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMWatchReq.ProtoReflect.Descriptor instead.
func (*HMWatchReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{22}
}

func (x *HMWatchReq) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMWatchReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HMWatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HmKey string `protobuf:"bytes,1,opt,name=hmKey,proto3" json:"hmKey,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HMWatchRsp) Reset() {
	*x = HMWatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMWatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMWatchRsp) ProtoMessage() {}

func (x *HMWatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMWatchRsp.ProtoReflect.Descriptor instead.
func (*HMWatchRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{23}
}

func (x *HMWatchRsp) GetHmKey() string {
	if x != nil {
		return x.HmKey
	}
	return ""
}

func (x *HMWatchRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LGetReq) Reset() {
	*x = LGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LGetReq) ProtoMessage() {}

func (x *LGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LGetReq.ProtoReflect.Descriptor instead.
func (*LGetReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{24}
}

func (x *LGetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LGetRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=kv,proto3" json:"kv,omitempty"`
}

func (x *LGetRsp) Reset() {
	*x = LGetRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LGetRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LGetRsp) ProtoMessage() {}

func (x *LGetRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LGetRsp.ProtoReflect.Descriptor instead.
func (*LGetRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{25}
}

func (x *LGetRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LGetRsp) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type LGetRangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	BegIndex int32  `protobuf:"varint,2,opt,name=begIndex,proto3" json:"begIndex,omitempty"`
	EndIndex int32  `protobuf:"varint,3,opt,name=endIndex,proto3" json:"endIndex,omitempty"`
}

func (x *LGetRangeReq) Reset() {
	*x = LGetRangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LGetRangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LGetRangeReq) ProtoMessage() {}

func (x *LGetRangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LGetRangeReq.ProtoReflect.Descriptor instead.
func (*LGetRangeReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{26}
}

func (x *LGetRangeReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LGetRangeReq) GetBegIndex() int32 {
	if x != nil {
		return x.BegIndex
	}
	return 0
}

func (x *LGetRangeReq) GetEndIndex() int32 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

type LGetRangeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=kv,proto3" json:"kv,omitempty"`
}

func (x *LGetRangeRsp) Reset() {
	*x = LGetRangeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LGetRangeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LGetRangeRsp) ProtoMessage() {}

func (x *LGetRangeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LGetRangeRsp.ProtoReflect.Descriptor instead.
func (*LGetRangeRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{27}
}

func (x *LGetRangeRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LGetRangeRsp) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type LPutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []string `protobuf:"bytes,2,rep,name=kv,proto3" json:"kv,omitempty"`
	Expire int64    `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *LPutReq) Reset() {
	*x = LPutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPutReq) ProtoMessage() {}

func (x *LPutReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPutReq.ProtoReflect.Descriptor instead.
func (*LPutReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{28}
}

func (x *LPutReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LPutReq) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LPutReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type LPutRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []string `protobuf:"bytes,2,rep,name=kv,proto3" json:"kv,omitempty"`
	Expire int64    `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *LPutRsp) Reset() {
	*x = LPutRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPutRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPutRsp) ProtoMessage() {}

func (x *LPutRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPutRsp.ProtoReflect.Descriptor instead.
func (*LPutRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{29}
}

func (x *LPutRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LPutRsp) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LPutRsp) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type LDelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LDelReq) Reset() {
	*x = LDelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDelReq) ProtoMessage() {}

func (x *LDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDelReq.ProtoReflect.Descriptor instead.
func (*LDelReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{30}
}

func (x *LDelReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LDelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LDelRsp) Reset() {
	*x = LDelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDelRsp) ProtoMessage() {}

func (x *LDelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDelRsp.ProtoReflect.Descriptor instead.
func (*LDelRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{31}
}

func (x *LDelRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LDelRangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	BegIndex int32  `protobuf:"varint,2,opt,name=begIndex,proto3" json:"begIndex,omitempty"`
	EndIndex int32  `protobuf:"varint,3,opt,name=endIndex,proto3" json:"endIndex,omitempty"`
}

func (x *LDelRangeReq) Reset() {
	*x = LDelRangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDelRangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDelRangeReq) ProtoMessage() {}

func (x *LDelRangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDelRangeReq.ProtoReflect.Descriptor instead.
func (*LDelRangeReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{32}
}

func (x *LDelRangeReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LDelRangeReq) GetBegIndex() int32 {
	if x != nil {
		return x.BegIndex
	}
	return 0
}

func (x *LDelRangeReq) GetEndIndex() int32 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

type LDelRangeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LDelRangeRsp) Reset() {
	*x = LDelRangeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDelRangeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDelRangeRsp) ProtoMessage() {}

func (x *LDelRangeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDelRangeRsp.ProtoReflect.Descriptor instead.
func (*LDelRangeRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{33}
}

func (x *LDelRangeRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LWatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LWatchReq) Reset() {
	*x = LWatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWatchReq) ProtoMessage() {}

func (x *LWatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWatchReq.ProtoReflect.Descriptor instead.
func (*LWatchReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{34}
}

func (x *LWatchReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LWatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LWatchRsp) Reset() {
	*x = LWatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWatchRsp) ProtoMessage() {}

func (x *LWatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWatchRsp.ProtoReflect.Descriptor instead.
func (*LWatchRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{35}
}

func (x *LWatchRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SGetReq) Reset() {
	*x = SGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGetReq) ProtoMessage() {}

func (x *SGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGetReq.ProtoReflect.Descriptor instead.
func (*SGetReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{36}
}

func (x *SGetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SGetRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=kv,proto3" json:"kv,omitempty"`
}

func (x *SGetRsp) Reset() {
	*x = SGetRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGetRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGetRsp) ProtoMessage() {}

func (x *SGetRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGetRsp.ProtoReflect.Descriptor instead.
func (*SGetRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{37}
}

func (x *SGetRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SGetRsp) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type SPutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []string `protobuf:"bytes,2,rep,name=kv,proto3" json:"kv,omitempty"`
	Expire int64    `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *SPutReq) Reset() {
	*x = SPutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPutReq) ProtoMessage() {}

func (x *SPutReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPutReq.ProtoReflect.Descriptor instead.
func (*SPutReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{38}
}

func (x *SPutReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SPutReq) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SPutReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type SPutRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []string `protobuf:"bytes,2,rep,name=kv,proto3" json:"kv,omitempty"`
	Expire int64    `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *SPutRsp) Reset() {
	*x = SPutRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPutRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPutRsp) ProtoMessage() {}

func (x *SPutRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPutRsp.ProtoReflect.Descriptor instead.
func (*SPutRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{39}
}

func (x *SPutRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SPutRsp) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SPutRsp) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type SDelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SDelReq) Reset() {
	*x = SDelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDelReq) ProtoMessage() {}

func (x *SDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDelReq.ProtoReflect.Descriptor instead.
func (*SDelReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{40}
}

func (x *SDelReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SDelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SDelRsp) Reset() {
	*x = SDelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDelRsp) ProtoMessage() {}

func (x *SDelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDelRsp.ProtoReflect.Descriptor instead.
func (*SDelRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{41}
}

func (x *SDelRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SDelMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *SDelMemberReq) Reset() {
	*x = SDelMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDelMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDelMemberReq) ProtoMessage() {}

func (x *SDelMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDelMemberReq.ProtoReflect.Descriptor instead.
func (*SDelMemberReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{42}
}

func (x *SDelMemberReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SDelMemberReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SDelMemberRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *SDelMemberRsp) Reset() {
	*x = SDelMemberRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDelMemberRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDelMemberRsp) ProtoMessage() {}

func (x *SDelMemberRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDelMemberRsp.ProtoReflect.Descriptor instead.
func (*SDelMemberRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{43}
}

func (x *SDelMemberRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SDelMemberRsp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SWatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SWatchReq) Reset() {
	*x = SWatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SWatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SWatchReq) ProtoMessage() {}

func (x *SWatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SWatchReq.ProtoReflect.Descriptor instead.
func (*SWatchReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{44}
}

func (x *SWatchReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SWatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SWatchRsp) Reset() {
	*x = SWatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SWatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SWatchRsp) ProtoMessage() {}

func (x *SWatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SWatchRsp.ProtoReflect.Descriptor instead.
func (*SWatchRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{45}
}

func (x *SWatchRsp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ClearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearReq) Reset() {
	*x = ClearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearReq) ProtoMessage() {}

func (x *ClearReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearReq.ProtoReflect.Descriptor instead.
func (*ClearReq) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{46}
}

type ClearRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearRsp) Reset() {
	*x = ClearRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearRsp) ProtoMessage() {}

func (x *ClearRsp) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearRsp.ProtoReflect.Descriptor instead.
func (*ClearRsp) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{47}
}

var File_bridge_proto protoreflect.FileDescriptor

var file_bridge_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x27, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1a, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x30, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x06, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x22, 0x48, 0x0a, 0x06, 0x50, 0x75, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x1a, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x2a, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa6,
	0x01, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6d,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1c, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1c, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x20, 0x0a, 0x08, 0x48, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x36, 0x0a, 0x08, 0x48, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a,
	0x0e, 0x48, 0x4d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x0e, 0x48, 0x4d, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x08, 0x48, 0x4d, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x60, 0x0a, 0x08, 0x48, 0x4d, 0x50,
	0x75, 0x74, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x48,
	0x4d, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x20, 0x0a,
	0x08, 0x48, 0x4d, 0x44, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x22,
	0x38, 0x0a, 0x0e, 0x48, 0x4d, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x38, 0x0a, 0x0e, 0x48, 0x4d, 0x44,
	0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x34, 0x0a, 0x0a, 0x48, 0x4d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x34, 0x0a, 0x0a, 0x48, 0x4d, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x1b, 0x0a, 0x07, 0x4c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x31, 0x0a, 0x07,
	0x4c, 0x47, 0x65, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x58, 0x0a, 0x0c, 0x4c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x36, 0x0a, 0x0c, 0x4c, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x49, 0x0a, 0x07, 0x4c, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x07,
	0x4c, 0x50, 0x75, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x1b, 0x0a, 0x07, 0x4c, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x1b, 0x0a, 0x07, 0x4c, 0x44, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x58, 0x0a, 0x0c, 0x4c, 0x44, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x0a, 0x0c, 0x4c,
	0x44, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1d, 0x0a,
	0x09, 0x4c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1d, 0x0a, 0x09,
	0x4c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1b, 0x0a, 0x07, 0x53,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x31, 0x0a, 0x07, 0x53, 0x47, 0x65, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x07, 0x53,
	0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x07, 0x53, 0x50, 0x75, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x22, 0x1b, 0x0a, 0x07, 0x53, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1b,
	0x0a, 0x07, 0x53, 0x44, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x37, 0x0a, 0x0d, 0x53,
	0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x53, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1d, 0x0a,
	0x09, 0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1d, 0x0a, 0x09,
	0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x0a, 0x0a, 0x08, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x22, 0x0a, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x73, 0x70, 0x32, 0x9f, 0x0c, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x12, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x27, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x12,
	0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x55, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x48,
	0x4d, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x4d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x48, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x48, 0x4d,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x48, 0x4d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x4d, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x48,
	0x4d, 0x50, 0x75, 0x74, 0x12, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x4d,
	0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x48, 0x4d, 0x50, 0x75, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x48, 0x4d,
	0x44, 0x65, 0x6c, 0x12, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x4d, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48,
	0x4d, 0x44, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x48, 0x4d, 0x44,
	0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x48, 0x4d, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x4d, 0x44, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x48, 0x4d,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48,
	0x4d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x48, 0x4d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x09, 0x48, 0x4d, 0x55, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x4d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x4d, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d,
	0x61, 0x70, 0x12, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x04, 0x4c, 0x47, 0x65, 0x74,
	0x12, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x47, 0x65, 0x74, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x4c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x14, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x4c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x2a, 0x0a, 0x04, 0x4c, 0x50, 0x75, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x4c, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x4c, 0x50, 0x75, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x04, 0x4c,
	0x44, 0x65, 0x6c, 0x12, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x44,
	0x65, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x4c, 0x44, 0x65, 0x6c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x44,
	0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x4c, 0x44, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x4c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x08, 0x4c, 0x55, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x11, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x04, 0x53,
	0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x47,
	0x65, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x04, 0x53, 0x50, 0x75, 0x74, 0x12,
	0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x50, 0x75, 0x74, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x04, 0x53, 0x44, 0x65, 0x6c, 0x12, 0x0f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x44, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0a, 0x53, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x44,
	0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x06, 0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x08, 0x53, 0x55, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bridge_proto_rawDescOnce sync.Once
	file_bridge_proto_rawDescData = file_bridge_proto_rawDesc
)

func file_bridge_proto_rawDescGZIP() []byte {
	file_bridge_proto_rawDescOnce.Do(func() {
		file_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_bridge_proto_rawDescData)
	})
	return file_bridge_proto_rawDescData
}

var file_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_bridge_proto_goTypes = []interface{}{
	(*PingReq)(nil),        // 0: bridge.PingReq
	(*PingRsp)(nil),        // 1: bridge.PingRsp
	(*GetReq)(nil),         // 2: bridge.GetReq
	(*GetRsp)(nil),         // 3: bridge.GetRsp
	(*PutReq)(nil),         // 4: bridge.PutReq
	(*PutRsp)(nil),         // 5: bridge.PutRsp
	(*DelReq)(nil),         // 6: bridge.DelReq
	(*DelRsp)(nil),         // 7: bridge.DelRsp
	(*PublishReq)(nil),     // 8: bridge.PublishReq
	(*PublishRsp)(nil),     // 9: bridge.PublishRsp
	(*WatchReq)(nil),       // 10: bridge.WatchReq
	(*WatchRsp)(nil),       // 11: bridge.WatchRsp
	(*HMGetReq)(nil),       // 12: bridge.HMGetReq
	(*HMGetRsp)(nil),       // 13: bridge.HMGetRsp
	(*HMGetMemberReq)(nil), // 14: bridge.HMGetMemberReq
	(*HMGetMemberRsp)(nil), // 15: bridge.HMGetMemberRsp
	(*HMPutReq)(nil),       // 16: bridge.HMPutReq
	(*HMPutRsp)(nil),       // 17: bridge.HMPutRsp
	(*HMDelReq)(nil),       // 18: bridge.HMDelReq
	(*HMDelRsp)(nil),       // 19: bridge.HMDelRsp
	(*HMDelMemberReq)(nil), // 20: bridge.HMDelMemberReq
	(*HMDelMemberRsp)(nil), // 21: bridge.HMDelMemberRsp
	(*HMWatchReq)(nil),     // 22: bridge.HMWatchReq
	(*HMWatchRsp)(nil),     // 23: bridge.HMWatchRsp
	(*LGetReq)(nil),        // 24: bridge.LGetReq
	(*LGetRsp)(nil),        // 25: bridge.LGetRsp
	(*LGetRangeReq)(nil),   // 26: bridge.LGetRangeReq
	(*LGetRangeRsp)(nil),   // 27: bridge.LGetRangeRsp
	(*LPutReq)(nil),        // 28: bridge.LPutReq
	(*LPutRsp)(nil),        // 29: bridge.LPutRsp
	(*LDelReq)(nil),        // 30: bridge.LDelReq
	(*LDelRsp)(nil),        // 31: bridge.LDelRsp
	(*LDelRangeReq)(nil),   // 32: bridge.LDelRangeReq
	(*LDelRangeRsp)(nil),   // 33: bridge.LDelRangeRsp
	(*LWatchReq)(nil),      // 34: bridge.LWatchReq
	(*LWatchRsp)(nil),      // 35: bridge.LWatchRsp
	(*SGetReq)(nil),        // 36: bridge.SGetReq
	(*SGetRsp)(nil),        // 37: bridge.SGetRsp
	(*SPutReq)(nil),        // 38: bridge.SPutReq
	(*SPutRsp)(nil),        // 39: bridge.SPutRsp
	(*SDelReq)(nil),        // 40: bridge.SDelReq
	(*SDelRsp)(nil),        // 41: bridge.SDelRsp
	(*SDelMemberReq)(nil),  // 42: bridge.SDelMemberReq
	(*SDelMemberRsp)(nil),  // 43: bridge.SDelMemberRsp
	(*SWatchReq)(nil),      // 44: bridge.SWatchReq
	(*SWatchRsp)(nil),      // 45: bridge.SWatchRsp
	(*ClearReq)(nil),       // 46: bridge.ClearReq
	(*ClearRsp)(nil),       // 47: bridge.ClearRsp
}
var file_bridge_proto_depIdxs = []int32{
	0,  // 0: bridge.RpcBridge.Ping:input_type -> bridge.PingReq
	8,  // 1: bridge.RpcBridge.Publish:input_type -> bridge.PublishReq
	2,  // 2: bridge.RpcBridge.Get:input_type -> bridge.GetReq
	4,  // 3: bridge.RpcBridge.Put:input_type -> bridge.PutReq
	6,  // 4: bridge.RpcBridge.Del:input_type -> bridge.DelReq
	10, // 5: bridge.RpcBridge.WatchKey:input_type -> bridge.WatchReq
	10, // 6: bridge.RpcBridge.UnWatchKey:input_type -> bridge.WatchReq
	46, // 7: bridge.RpcBridge.ClearString:input_type -> bridge.ClearReq
	12, // 8: bridge.RpcBridge.HMGet:input_type -> bridge.HMGetReq
	14, // 9: bridge.RpcBridge.HMGetMember:input_type -> bridge.HMGetMemberReq
	16, // 10: bridge.RpcBridge.HMPut:input_type -> bridge.HMPutReq
	18, // 11: bridge.RpcBridge.HMDel:input_type -> bridge.HMDelReq
	20, // 12: bridge.RpcBridge.HMDelMember:input_type -> bridge.HMDelMemberReq
	22, // 13: bridge.RpcBridge.HMWatch:input_type -> bridge.HMWatchReq
	22, // 14: bridge.RpcBridge.HMUnWatch:input_type -> bridge.HMWatchReq
	46, // 15: bridge.RpcBridge.ClearMap:input_type -> bridge.ClearReq
	24, // 16: bridge.RpcBridge.LGet:input_type -> bridge.LGetReq
	26, // 17: bridge.RpcBridge.LGetRange:input_type -> bridge.LGetRangeReq
	28, // 18: bridge.RpcBridge.LPut:input_type -> bridge.LPutReq
	30, // 19: bridge.RpcBridge.LDel:input_type -> bridge.LDelReq
	32, // 20: bridge.RpcBridge.LDelRange:input_type -> bridge.LDelRangeReq
	34, // 21: bridge.RpcBridge.LWatch:input_type -> bridge.LWatchReq
	34, // 22: bridge.RpcBridge.LUnWatch:input_type -> bridge.LWatchReq
	46, // 23: bridge.RpcBridge.ClearList:input_type -> bridge.ClearReq
	36, // 24: bridge.RpcBridge.SGet:input_type -> bridge.SGetReq
	38, // 25: bridge.RpcBridge.SPut:input_type -> bridge.SPutReq
	40, // 26: bridge.RpcBridge.SDel:input_type -> bridge.SDelReq
	42, // 27: bridge.RpcBridge.SDelMember:input_type -> bridge.SDelMemberReq
	44, // 28: bridge.RpcBridge.SWatch:input_type -> bridge.SWatchReq
	44, // 29: bridge.RpcBridge.SUnWatch:input_type -> bridge.SWatchReq
	46, // 30: bridge.RpcBridge.ClearSet:input_type -> bridge.ClearReq
	1,  // 31: bridge.RpcBridge.Ping:output_type -> bridge.PingRsp
	9,  // 32: bridge.RpcBridge.Publish:output_type -> bridge.PublishRsp
	3,  // 33: bridge.RpcBridge.Get:output_type -> bridge.GetRsp
	5,  // 34: bridge.RpcBridge.Put:output_type -> bridge.PutRsp
	7,  // 35: bridge.RpcBridge.Del:output_type -> bridge.DelRsp
	11, // 36: bridge.RpcBridge.WatchKey:output_type -> bridge.WatchRsp
	11, // 37: bridge.RpcBridge.UnWatchKey:output_type -> bridge.WatchRsp
	47, // 38: bridge.RpcBridge.ClearString:output_type -> bridge.ClearRsp
	13, // 39: bridge.RpcBridge.HMGet:output_type -> bridge.HMGetRsp
	15, // 40: bridge.RpcBridge.HMGetMember:output_type -> bridge.HMGetMemberRsp
	17, // 41: bridge.RpcBridge.HMPut:output_type -> bridge.HMPutRsp
	19, // 42: bridge.RpcBridge.HMDel:output_type -> bridge.HMDelRsp
	21, // 43: bridge.RpcBridge.HMDelMember:output_type -> bridge.HMDelMemberRsp
	23, // 44: bridge.RpcBridge.HMWatch:output_type -> bridge.HMWatchRsp
	23, // 45: bridge.RpcBridge.HMUnWatch:output_type -> bridge.HMWatchRsp
	47, // 46: bridge.RpcBridge.ClearMap:output_type -> bridge.ClearRsp
	25, // 47: bridge.RpcBridge.LGet:output_type -> bridge.LGetRsp
	27, // 48: bridge.RpcBridge.LGetRange:output_type -> bridge.LGetRangeRsp
	29, // 49: bridge.RpcBridge.LPut:output_type -> bridge.LPutRsp
	31, // 50: bridge.RpcBridge.LDel:output_type -> bridge.LDelRsp
	33, // 51: bridge.RpcBridge.LDelRange:output_type -> bridge.LDelRangeRsp
	35, // 52: bridge.RpcBridge.LWatch:output_type -> bridge.LWatchRsp
	35, // 53: bridge.RpcBridge.LUnWatch:output_type -> bridge.LWatchRsp
	47, // 54: bridge.RpcBridge.ClearList:output_type -> bridge.ClearRsp
	37, // 55: bridge.RpcBridge.SGet:output_type -> bridge.SGetRsp
	39, // 56: bridge.RpcBridge.SPut:output_type -> bridge.SPutRsp
	41, // 57: bridge.RpcBridge.SDel:output_type -> bridge.SDelRsp
	43, // 58: bridge.RpcBridge.SDelMember:output_type -> bridge.SDelMemberRsp
	45, // 59: bridge.RpcBridge.SWatch:output_type -> bridge.SWatchRsp
	45, // 60: bridge.RpcBridge.SUnWatch:output_type -> bridge.SWatchRsp
	47, // 61: bridge.RpcBridge.ClearSet:output_type -> bridge.ClearRsp
	31, // [31:62] is the sub-list for method output_type
	0,  // [0:31] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_bridge_proto_init() }
func file_bridge_proto_init() {
	if File_bridge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bridge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMGetRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMGetMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMGetMemberRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMPutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMPutRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMDelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMDelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMDelMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMDelMemberRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMWatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMWatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LGetRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LGetRangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LGetRangeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPutRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LDelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LDelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LDelRangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LDelRangeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SGetRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPutRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDelMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDelMemberRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SWatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SWatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bridge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bridge_proto_goTypes,
		DependencyIndexes: file_bridge_proto_depIdxs,
		MessageInfos:      file_bridge_proto_msgTypes,
	}.Build()
	File_bridge_proto = out.File
	file_bridge_proto_rawDesc = nil
	file_bridge_proto_goTypes = nil
	file_bridge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcBridgeClient is the client API for RpcBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcBridgeClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRsp, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (RpcBridge_PublishClient, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRsp, error)
	Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelRsp, error)
	WatchKey(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (*WatchRsp, error)
	UnWatchKey(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (*WatchRsp, error)
	ClearValue(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error)
	HMGet(ctx context.Context, in *HMGetReq, opts ...grpc.CallOption) (*HMGetRsp, error)
	HMGetMember(ctx context.Context, in *HMGetMemberReq, opts ...grpc.CallOption) (*HMGetMemberRsp, error)
	HMPut(ctx context.Context, in *HMPutReq, opts ...grpc.CallOption) (*HMPutRsp, error)
	HMDel(ctx context.Context, in *HMDelReq, opts ...grpc.CallOption) (*HMDelRsp, error)
	HMDelMember(ctx context.Context, in *HMDelMemberReq, opts ...grpc.CallOption) (*HMDelMemberRsp, error)
	HMWatch(ctx context.Context, in *HMWatchReq, opts ...grpc.CallOption) (*HMWatchRsp, error)
	HMUnWatch(ctx context.Context, in *HMWatchReq, opts ...grpc.CallOption) (*HMWatchRsp, error)
	ClearMap(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error)
	LGet(ctx context.Context, in *LGetReq, opts ...grpc.CallOption) (*LGetRsp, error)
	LGetRange(ctx context.Context, in *LGetRangeReq, opts ...grpc.CallOption) (*LGetRangeRsp, error)
	LPut(ctx context.Context, in *LPutReq, opts ...grpc.CallOption) (*LPutRsp, error)
	LDel(ctx context.Context, in *LDelReq, opts ...grpc.CallOption) (*LDelRsp, error)
	LDelRange(ctx context.Context, in *LDelRangeReq, opts ...grpc.CallOption) (*LDelRangeRsp, error)
	LWatch(ctx context.Context, in *LWatchReq, opts ...grpc.CallOption) (*LWatchRsp, error)
	LUnWatch(ctx context.Context, in *LWatchReq, opts ...grpc.CallOption) (*LWatchRsp, error)
	ClearList(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error)
	SGet(ctx context.Context, in *SGetReq, opts ...grpc.CallOption) (*SGetRsp, error)
	SPut(ctx context.Context, in *SPutReq, opts ...grpc.CallOption) (*SPutRsp, error)
	SDel(ctx context.Context, in *SDelReq, opts ...grpc.CallOption) (*SDelRsp, error)
	SDelMember(ctx context.Context, in *SDelMemberReq, opts ...grpc.CallOption) (*SDelMemberRsp, error)
	SWatch(ctx context.Context, in *SWatchReq, opts ...grpc.CallOption) (*SWatchRsp, error)
	SUnWatch(ctx context.Context, in *SWatchReq, opts ...grpc.CallOption) (*SWatchRsp, error)
	ClearSet(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error)
}

type rpcBridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcBridgeClient(cc grpc.ClientConnInterface) RpcBridgeClient {
	return &rpcBridgeClient{cc}
}

func (c *rpcBridgeClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRsp, error) {
	out := new(PingRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) Publish(ctx context.Context, opts ...grpc.CallOption) (RpcBridge_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcBridge_serviceDesc.Streams[0], "/bridge.RpcBridge/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcBridgePublishClient{stream}
	return x, nil
}

type RpcBridge_PublishClient interface {
	Send(*PublishReq) error
	Recv() (*PublishRsp, error)
	grpc.ClientStream
}

type rpcBridgePublishClient struct {
	grpc.ClientStream
}

func (x *rpcBridgePublishClient) Send(m *PublishReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcBridgePublishClient) Recv() (*PublishRsp, error) {
	m := new(PublishRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcBridgeClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRsp, error) {
	out := new(PutRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelRsp, error) {
	out := new(DelRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) WatchKey(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (*WatchRsp, error) {
	out := new(WatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/WatchKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) UnWatchKey(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (*WatchRsp, error) {
	out := new(WatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/UnWatchKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) ClearValue(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error) {
	out := new(ClearRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/ClearString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) HMGet(ctx context.Context, in *HMGetReq, opts ...grpc.CallOption) (*HMGetRsp, error) {
	out := new(HMGetRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/HMGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) HMGetMember(ctx context.Context, in *HMGetMemberReq, opts ...grpc.CallOption) (*HMGetMemberRsp, error) {
	out := new(HMGetMemberRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/HMGetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) HMPut(ctx context.Context, in *HMPutReq, opts ...grpc.CallOption) (*HMPutRsp, error) {
	out := new(HMPutRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/HMPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) HMDel(ctx context.Context, in *HMDelReq, opts ...grpc.CallOption) (*HMDelRsp, error) {
	out := new(HMDelRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/HMDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) HMDelMember(ctx context.Context, in *HMDelMemberReq, opts ...grpc.CallOption) (*HMDelMemberRsp, error) {
	out := new(HMDelMemberRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/HMDelMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) HMWatch(ctx context.Context, in *HMWatchReq, opts ...grpc.CallOption) (*HMWatchRsp, error) {
	out := new(HMWatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/HMWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) HMUnWatch(ctx context.Context, in *HMWatchReq, opts ...grpc.CallOption) (*HMWatchRsp, error) {
	out := new(HMWatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/HMUnWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) ClearMap(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error) {
	out := new(ClearRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/ClearMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) LGet(ctx context.Context, in *LGetReq, opts ...grpc.CallOption) (*LGetRsp, error) {
	out := new(LGetRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/LGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) LGetRange(ctx context.Context, in *LGetRangeReq, opts ...grpc.CallOption) (*LGetRangeRsp, error) {
	out := new(LGetRangeRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/LGetRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) LPut(ctx context.Context, in *LPutReq, opts ...grpc.CallOption) (*LPutRsp, error) {
	out := new(LPutRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/LPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) LDel(ctx context.Context, in *LDelReq, opts ...grpc.CallOption) (*LDelRsp, error) {
	out := new(LDelRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/LDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) LDelRange(ctx context.Context, in *LDelRangeReq, opts ...grpc.CallOption) (*LDelRangeRsp, error) {
	out := new(LDelRangeRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/LDelRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) LWatch(ctx context.Context, in *LWatchReq, opts ...grpc.CallOption) (*LWatchRsp, error) {
	out := new(LWatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/LWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) LUnWatch(ctx context.Context, in *LWatchReq, opts ...grpc.CallOption) (*LWatchRsp, error) {
	out := new(LWatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/LUnWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) ClearList(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error) {
	out := new(ClearRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/ClearList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) SGet(ctx context.Context, in *SGetReq, opts ...grpc.CallOption) (*SGetRsp, error) {
	out := new(SGetRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/SGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) SPut(ctx context.Context, in *SPutReq, opts ...grpc.CallOption) (*SPutRsp, error) {
	out := new(SPutRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/SPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) SDel(ctx context.Context, in *SDelReq, opts ...grpc.CallOption) (*SDelRsp, error) {
	out := new(SDelRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/SDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) SDelMember(ctx context.Context, in *SDelMemberReq, opts ...grpc.CallOption) (*SDelMemberRsp, error) {
	out := new(SDelMemberRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/SDelMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) SWatch(ctx context.Context, in *SWatchReq, opts ...grpc.CallOption) (*SWatchRsp, error) {
	out := new(SWatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/SWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) SUnWatch(ctx context.Context, in *SWatchReq, opts ...grpc.CallOption) (*SWatchRsp, error) {
	out := new(SWatchRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/SUnWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcBridgeClient) ClearSet(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*ClearRsp, error) {
	out := new(ClearRsp)
	err := c.cc.Invoke(ctx, "/bridge.RpcBridge/ClearSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcBridgeServer is the server API for RpcBridge service.
type RpcBridgeServer interface {
	Ping(context.Context, *PingReq) (*PingRsp, error)
	Publish(RpcBridge_PublishServer) error
	Get(context.Context, *GetReq) (*GetRsp, error)
	Put(context.Context, *PutReq) (*PutRsp, error)
	Del(context.Context, *DelReq) (*DelRsp, error)
	WatchKey(context.Context, *WatchReq) (*WatchRsp, error)
	UnWatchKey(context.Context, *WatchReq) (*WatchRsp, error)
	ClearValue(context.Context, *ClearReq) (*ClearRsp, error)
	HMGet(context.Context, *HMGetReq) (*HMGetRsp, error)
	HMGetMember(context.Context, *HMGetMemberReq) (*HMGetMemberRsp, error)
	HMPut(context.Context, *HMPutReq) (*HMPutRsp, error)
	HMDel(context.Context, *HMDelReq) (*HMDelRsp, error)
	HMDelMember(context.Context, *HMDelMemberReq) (*HMDelMemberRsp, error)
	HMWatch(context.Context, *HMWatchReq) (*HMWatchRsp, error)
	HMUnWatch(context.Context, *HMWatchReq) (*HMWatchRsp, error)
	ClearMap(context.Context, *ClearReq) (*ClearRsp, error)
	LGet(context.Context, *LGetReq) (*LGetRsp, error)
	LGetRange(context.Context, *LGetRangeReq) (*LGetRangeRsp, error)
	LPut(context.Context, *LPutReq) (*LPutRsp, error)
	LDel(context.Context, *LDelReq) (*LDelRsp, error)
	LDelRange(context.Context, *LDelRangeReq) (*LDelRangeRsp, error)
	LWatch(context.Context, *LWatchReq) (*LWatchRsp, error)
	LUnWatch(context.Context, *LWatchReq) (*LWatchRsp, error)
	ClearList(context.Context, *ClearReq) (*ClearRsp, error)
	SGet(context.Context, *SGetReq) (*SGetRsp, error)
	SPut(context.Context, *SPutReq) (*SPutRsp, error)
	SDel(context.Context, *SDelReq) (*SDelRsp, error)
	SDelMember(context.Context, *SDelMemberReq) (*SDelMemberRsp, error)
	SWatch(context.Context, *SWatchReq) (*SWatchRsp, error)
	SUnWatch(context.Context, *SWatchReq) (*SWatchRsp, error)
	ClearSet(context.Context, *ClearReq) (*ClearRsp, error)
}

// UnimplementedRpcBridgeServer can be embedded to have forward compatible implementations.
type UnimplementedRpcBridgeServer struct {
}

func (*UnimplementedRpcBridgeServer) Ping(context.Context, *PingReq) (*PingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedRpcBridgeServer) Publish(RpcBridge_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedRpcBridgeServer) Get(context.Context, *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRpcBridgeServer) Put(context.Context, *PutReq) (*PutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedRpcBridgeServer) Del(context.Context, *DelReq) (*DelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedRpcBridgeServer) WatchKey(context.Context, *WatchReq) (*WatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchKey not implemented")
}
func (*UnimplementedRpcBridgeServer) UnWatchKey(context.Context, *WatchReq) (*WatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWatchKey not implemented")
}
func (*UnimplementedRpcBridgeServer) ClearValue(context.Context, *ClearReq) (*ClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearString not implemented")
}
func (*UnimplementedRpcBridgeServer) HMGet(context.Context, *HMGetReq) (*HMGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMGet not implemented")
}
func (*UnimplementedRpcBridgeServer) HMGetMember(context.Context, *HMGetMemberReq) (*HMGetMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMGetMember not implemented")
}
func (*UnimplementedRpcBridgeServer) HMPut(context.Context, *HMPutReq) (*HMPutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMPut not implemented")
}
func (*UnimplementedRpcBridgeServer) HMDel(context.Context, *HMDelReq) (*HMDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMDel not implemented")
}
func (*UnimplementedRpcBridgeServer) HMDelMember(context.Context, *HMDelMemberReq) (*HMDelMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMDelMember not implemented")
}
func (*UnimplementedRpcBridgeServer) HMWatch(context.Context, *HMWatchReq) (*HMWatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMWatch not implemented")
}
func (*UnimplementedRpcBridgeServer) HMUnWatch(context.Context, *HMWatchReq) (*HMWatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMUnWatch not implemented")
}
func (*UnimplementedRpcBridgeServer) ClearMap(context.Context, *ClearReq) (*ClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearMap not implemented")
}
func (*UnimplementedRpcBridgeServer) LGet(context.Context, *LGetReq) (*LGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LGet not implemented")
}
func (*UnimplementedRpcBridgeServer) LGetRange(context.Context, *LGetRangeReq) (*LGetRangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LGetRange not implemented")
}
func (*UnimplementedRpcBridgeServer) LPut(context.Context, *LPutReq) (*LPutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPut not implemented")
}
func (*UnimplementedRpcBridgeServer) LDel(context.Context, *LDelReq) (*LDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LDel not implemented")
}
func (*UnimplementedRpcBridgeServer) LDelRange(context.Context, *LDelRangeReq) (*LDelRangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LDelRange not implemented")
}
func (*UnimplementedRpcBridgeServer) LWatch(context.Context, *LWatchReq) (*LWatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LWatch not implemented")
}
func (*UnimplementedRpcBridgeServer) LUnWatch(context.Context, *LWatchReq) (*LWatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LUnWatch not implemented")
}
func (*UnimplementedRpcBridgeServer) ClearList(context.Context, *ClearReq) (*ClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearList not implemented")
}
func (*UnimplementedRpcBridgeServer) SGet(context.Context, *SGetReq) (*SGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SGet not implemented")
}
func (*UnimplementedRpcBridgeServer) SPut(context.Context, *SPutReq) (*SPutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPut not implemented")
}
func (*UnimplementedRpcBridgeServer) SDel(context.Context, *SDelReq) (*SDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDel not implemented")
}
func (*UnimplementedRpcBridgeServer) SDelMember(context.Context, *SDelMemberReq) (*SDelMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDelMember not implemented")
}
func (*UnimplementedRpcBridgeServer) SWatch(context.Context, *SWatchReq) (*SWatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SWatch not implemented")
}
func (*UnimplementedRpcBridgeServer) SUnWatch(context.Context, *SWatchReq) (*SWatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SUnWatch not implemented")
}
func (*UnimplementedRpcBridgeServer) ClearSet(context.Context, *ClearReq) (*ClearRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSet not implemented")
}

func RegisterRpcBridgeServer(s *grpc.Server, srv RpcBridgeServer) {
	s.RegisterService(&_RpcBridge_serviceDesc, srv)
}

func _RpcBridge_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcBridgeServer).Publish(&rpcBridgePublishServer{stream})
}

type RpcBridge_PublishServer interface {
	Send(*PublishRsp) error
	Recv() (*PublishReq, error)
	grpc.ServerStream
}

type rpcBridgePublishServer struct {
	grpc.ServerStream
}

func (x *rpcBridgePublishServer) Send(m *PublishRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcBridgePublishServer) Recv() (*PublishReq, error) {
	m := new(PublishReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RpcBridge_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).Del(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_WatchKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).WatchKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/WatchKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).WatchKey(ctx, req.(*WatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_UnWatchKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).UnWatchKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/UnWatchKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).UnWatchKey(ctx, req.(*WatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_ClearValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).ClearValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/ClearString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).ClearValue(ctx, req.(*ClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_HMGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).HMGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/HMGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).HMGet(ctx, req.(*HMGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_HMGetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMGetMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).HMGetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/HMGetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).HMGetMember(ctx, req.(*HMGetMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_HMPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).HMPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/HMPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).HMPut(ctx, req.(*HMPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_HMDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).HMDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/HMDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).HMDel(ctx, req.(*HMDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_HMDelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMDelMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).HMDelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/HMDelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).HMDelMember(ctx, req.(*HMDelMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_HMWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMWatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).HMWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/HMWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).HMWatch(ctx, req.(*HMWatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_HMUnWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMWatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).HMUnWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/HMUnWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).HMUnWatch(ctx, req.(*HMWatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_ClearMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).ClearMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/ClearMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).ClearMap(ctx, req.(*ClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_LGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).LGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/LGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).LGet(ctx, req.(*LGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_LGetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LGetRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).LGetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/LGetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).LGetRange(ctx, req.(*LGetRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_LPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).LPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/LPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).LPut(ctx, req.(*LPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_LDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).LDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/LDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).LDel(ctx, req.(*LDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_LDelRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDelRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).LDelRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/LDelRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).LDelRange(ctx, req.(*LDelRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_LWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LWatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).LWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/LWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).LWatch(ctx, req.(*LWatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_LUnWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LWatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).LUnWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/LUnWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).LUnWatch(ctx, req.(*LWatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_ClearList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).ClearList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/ClearList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).ClearList(ctx, req.(*ClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_SGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).SGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/SGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).SGet(ctx, req.(*SGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_SPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).SPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/SPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).SPut(ctx, req.(*SPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_SDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).SDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/SDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).SDel(ctx, req.(*SDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_SDelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDelMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).SDelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/SDelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).SDelMember(ctx, req.(*SDelMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_SWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SWatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).SWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/SWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).SWatch(ctx, req.(*SWatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_SUnWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SWatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).SUnWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/SUnWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).SUnWatch(ctx, req.(*SWatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcBridge_ClearSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcBridgeServer).ClearSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.RpcBridge/ClearSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcBridgeServer).ClearSet(ctx, req.(*ClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcBridge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.RpcBridge",
	HandlerType: (*RpcBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RpcBridge_Ping_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RpcBridge_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _RpcBridge_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _RpcBridge_Del_Handler,
		},
		{
			MethodName: "WatchKey",
			Handler:    _RpcBridge_WatchKey_Handler,
		},
		{
			MethodName: "UnWatchKey",
			Handler:    _RpcBridge_UnWatchKey_Handler,
		},
		{
			MethodName: "ClearString",
			Handler:    _RpcBridge_ClearValue_Handler,
		},
		{
			MethodName: "HMGet",
			Handler:    _RpcBridge_HMGet_Handler,
		},
		{
			MethodName: "HMGetMember",
			Handler:    _RpcBridge_HMGetMember_Handler,
		},
		{
			MethodName: "HMPut",
			Handler:    _RpcBridge_HMPut_Handler,
		},
		{
			MethodName: "HMDel",
			Handler:    _RpcBridge_HMDel_Handler,
		},
		{
			MethodName: "HMDelMember",
			Handler:    _RpcBridge_HMDelMember_Handler,
		},
		{
			MethodName: "HMWatch",
			Handler:    _RpcBridge_HMWatch_Handler,
		},
		{
			MethodName: "HMUnWatch",
			Handler:    _RpcBridge_HMUnWatch_Handler,
		},
		{
			MethodName: "ClearMap",
			Handler:    _RpcBridge_ClearMap_Handler,
		},
		{
			MethodName: "LGet",
			Handler:    _RpcBridge_LGet_Handler,
		},
		{
			MethodName: "LGetRange",
			Handler:    _RpcBridge_LGetRange_Handler,
		},
		{
			MethodName: "LPut",
			Handler:    _RpcBridge_LPut_Handler,
		},
		{
			MethodName: "LDel",
			Handler:    _RpcBridge_LDel_Handler,
		},
		{
			MethodName: "LDelRange",
			Handler:    _RpcBridge_LDelRange_Handler,
		},
		{
			MethodName: "LWatch",
			Handler:    _RpcBridge_LWatch_Handler,
		},
		{
			MethodName: "LUnWatch",
			Handler:    _RpcBridge_LUnWatch_Handler,
		},
		{
			MethodName: "ClearList",
			Handler:    _RpcBridge_ClearList_Handler,
		},
		{
			MethodName: "SGet",
			Handler:    _RpcBridge_SGet_Handler,
		},
		{
			MethodName: "SPut",
			Handler:    _RpcBridge_SPut_Handler,
		},
		{
			MethodName: "SDel",
			Handler:    _RpcBridge_SDel_Handler,
		},
		{
			MethodName: "SDelMember",
			Handler:    _RpcBridge_SDelMember_Handler,
		},
		{
			MethodName: "SWatch",
			Handler:    _RpcBridge_SWatch_Handler,
		},
		{
			MethodName: "SUnWatch",
			Handler:    _RpcBridge_SUnWatch_Handler,
		},
		{
			MethodName: "ClearSet",
			Handler:    _RpcBridge_ClearSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _RpcBridge_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bridge.proto",
}
